generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

// ---------- ENUMS ----------
enum Status {
  ACTIVE
  INACTIVE
}

enum DistanceUnit {
  KM
  MI
}

enum BillingBasis {
  DISTANCE
  HOURLY
  FLAT_RATE
}

enum LocationType {
  ORIGIN
  DESTINATION
  WAYPOINT
}

enum ChargeScope {
  BASE_FARE // Base used for % calcs
  PERCENTAGE // % of base fare (taxable)
  FIXED_RATE // Flat amount (taxable)
  PERCENTAGE_NO_TAX // % of base fare, not taxable
  FIXED_RATE_NO_TAX // Flat, not taxable (e.g., reimburse)
  FIXED_PER_UNIT // Flat per unit (e.g., per stop)
}

enum FlightStatus {
  SCHEDULED
  DEPARTED
  ACTIVE
  LANDED
  CANCELLED
}

enum TripState {
  DRAFT
  PENDING
  CONFIRMED
  EN_ROUTE
  ON_LOCATION
  PASSENGER_ONBOARD
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum TripType {
  IN_HOUSE
  FARMED_OUT
}

enum PaymentProvider {
  STRIPE
  CASH
  OTHER
}

enum QuoteStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
  CANCELLED
  BOOKED
}

enum OrderStatus {
  BOOKED
  CANCELLED
  COMPLETED
}

// ---------- CONTACTS, MESSAGES, CONVERSIONS, PAYMENTS ----------
model Contact {
  id              String          @id @default(uuid()) // Primary key
  created_at      DateTime        @default(now()) // Creation timestamp
  updated_at      DateTime        @updatedAt // Update timestamp
  first_name      String // Contact first name
  last_name       String // Contact last name
  full_name       String // Contact full name
  email_address   String          @unique @db.Citext // Case-insensitive unique email
  phone_number    String?         @unique // E.164 formatted phone (optional)
  notes           String? // Freeform notes
  messages        Message[] // Messages from web/contact forms
  conversions     Conversion[] // UTM/source attribution
  payment_methods PaymentMethod[] // Saved payment methods
  trips           TripPassenger[] // Passenger/booker joins
  Quote           Quote[]

  @@index([last_name, first_name])
  @@map("contacts")
}

model Message {
  id         String   @id @default(uuid()) // Primary key
  created_at DateTime @default(now()) // Creation timestamp
  updated_at DateTime @updatedAt // Update timestamp
  message    String // Message body
  subject    String // Message subject
  contact_id String // FK → Contact.id
  contact    Contact  @relation(fields: [contact_id], references: [id], onDelete: Cascade) // Contact relation
  user_id    String? // Optional internal user id (staff)
  is_read    Boolean  @default(false) // Read flag

  @@index([contact_id, created_at])
  @@map("messages")
}

model Conversion {
  id              String   @id @default(uuid()) // Primary key
  created_at      DateTime @default(now()) // Creation timestamp
  utm_term        String? // UTM term
  utm_medium      String? // UTM medium
  utm_source      String? // UTM source
  utm_campaign    String? // UTM campaign
  gclid           String? // Google Click ID
  source          String? // Freeform source name
  conversion_name String? // Named conversion (e.g., form_submit)
  contact_id      String // FK → Contact.id
  contact         Contact  @relation(fields: [contact_id], references: [id], onDelete: Cascade) // Contact relation

  @@index([contact_id])
  @@map("conversions")
}

model PaymentMethod {
  id          String          @id @default(uuid()) // Primary key
  created_at  DateTime        @default(now()) // Creation timestamp
  updated_at  DateTime        @updatedAt // Update timestamp
  provider    PaymentProvider // Payment provider (e.g., STRIPE)
  external_id String          @unique // Provider PM id (e.g., Stripe PM_xxx)
  brand       String? // Card brand (if card)
  last4       String? // Last 4 digits (if card)
  exp_month   Int? // Expiry month (if card)
  exp_year    Int? // Expiry year (if card)
  contact_id  String // FK → Contact.id
  contact     Contact         @relation(fields: [contact_id], references: [id], onDelete: Cascade) // Owner contact

  @@index([contact_id])
  @@map("payment_methods")
}

// ---------- SALES: QUOTE → ORDER (SNAPSHOT) ----------
model Quote {
  id           String   @id @default(uuid()) // Primary key
  quote_number Int      @unique @default(autoincrement()) // Human-friendly quote number
  created_at   DateTime @default(now()) // Creation timestamp
  updated_at   DateTime @updatedAt // Update timestamp

  contact_id String // FK → Contact.id
  contact    Contact @relation(fields: [contact_id], references: [id], onDelete: Cascade) // Buyer

  // Selected offering at quote time (enforce FKs)
  service_id String // FK → ServiceClass.id
  vehicle_id String // FK → VehicleClass.id
  service    ServiceClass @relation(fields: [service_id], references: [id]) // Quoted service class
  vehicle    VehicleClass @relation(fields: [vehicle_id], references: [id]) // Quoted vehicle class

  sales_tax_number Int      @default(1) // FK → SalesTax.tax_number (region rule)
  sales_tax        SalesTax @relation(fields: [sales_tax_number], references: [tax_number], onDelete: Cascade) // Tax rule snapshot ref

  selected_hours      Int? @default(2) // Requested hours (if hourly)
  selected_passengers Int  @default(1) // Requested passenger count

  quote_subtotal  Decimal?    @db.Decimal(12, 2) // Cached subtotal (optional)
  quote_tax_total Decimal?    @db.Decimal(12, 2) // Cached tax total (optional)
  quote_total     Decimal     @db.Decimal(12, 2) // Cached grand total (authoritative at quote time)
  short_link      String? // Public quote short link
  reference_value String? // External reference (PO#, etc.)
  status          QuoteStatus @default(DRAFT) // Quote lifecycle state

  trips  Trip[] // One or more trips included in this quote
  orders Order[] // Order generated from this quote (at most 1)
  Price  Price[]

  @@index([contact_id])
  @@index([sales_tax_number])
  @@map("quotes")
}

model Order {
  id           String      @id @default(uuid()) // Primary key
  created_at   DateTime    @default(now()) // Creation timestamp
  updated_at   DateTime    @updatedAt // Update timestamp
  quote_number Int         @unique // FK → Quote.quote_number (1:1)
  quote        Quote       @relation(fields: [quote_number], references: [quote_number], onDelete: Cascade) // Source quote
  status       OrderStatus @default(BOOKED) // Order lifecycle state
  currency     String      @default("USD") // Currency for money fields
  total_paid   Decimal     @default(0) @db.Decimal(12, 2) // Total captured/received

  lines       OrderLine[] // Immutable snapshot lines (copied from PriceItem)
  adjustments OrderAdjustment[] // Append-only adjustments (delta charges/refunds)

  @@map("orders")
}

model OrderLine {
  id              String      @id @default(uuid()) // Primary key
  created_at      DateTime    @default(now()) // Creation timestamp
  order_id        String // FK → Order.id
  order           Order       @relation(fields: [order_id], references: [id], onDelete: Cascade) // Parent order
  trip_id         String? // Optional mapping back to Trip
  label           String // Line label at snapshot time
  description     String? // Line description at snapshot time
  scope           ChargeScope // Calc scope used at snapshot time
  quantity        Decimal     @db.Decimal(10, 2) // Quantity at snapshot time
  unit_amount     Decimal?    @db.Decimal(12, 2) // Unit amount at snapshot time
  percent         Decimal?    @db.Decimal(7, 4) // Percent (0.1500 = 15%) at snapshot time
  taxable         Boolean     @default(true) // Whether taxable at snapshot time
  applies_to_base Boolean     @default(false) // Whether modifies base at snapshot time
  tax_bps         Int         @default(0) // Applied tax in basis points (e.g., 1300 = 13%)
  line_total      Decimal     @db.Decimal(12, 2) // Final computed amount of this line

  @@index([order_id])
  @@index([trip_id])
  @@map("order_lines")
}

model OrderAdjustment {
  id         String   @id @default(uuid()) // Primary key
  created_at DateTime @default(now()) // Creation timestamp
  order_id   String // FK → Order.id
  order      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade) // Parent order
  trip_id    String? // Optional mapping back to Trip
  reason     String // Reason (e.g., extra wait time)
  amount     Decimal  @db.Decimal(12, 2) // Positive = charge, negative = refund
  taxable    Boolean  @default(false) // Whether taxable
  tax_bps    Int      @default(0) // Tax applied to this adjustment (bps)

  @@index([order_id])
  @@map("order_adjustments")
}

// ---------- OPERATIONS: TRIPS, PASSENGERS, LOCATIONS, PRICES ----------
model Trip {
  id         String   @id @default(uuid()) // Primary key
  created_at DateTime @default(now()) // Creation timestamp
  updated_at DateTime @updatedAt // Update timestamp

  pickup_at        DateTime? // Scheduled pickup datetime
  pickup_tz        String? // Pickup timezone (IANA)
  distance_m       Int? // Estimated distance in meters
  duration_s       Int? // Estimated duration in seconds
  notes            String? // Operational notes
  carry_on_luggage Int       @default(0) // Count of carry-on items
  large_luggage    Int       @default(0) // Count of large luggage
  trip_type        TripType  @default(IN_HOUSE) // In-house vs farmed-out

  driver_id String? // FK → Driver.id (assigned driver)
  driver    Driver? @relation(fields: [driver_id], references: [id]) // Driver relation

  service_class_id String // FK → ServiceClass.id (selected service)
  service_class    ServiceClass @relation(fields: [service_class_id], references: [id]) // Service relation
  vehicle_class_id String // FK → VehicleClass.id (selected vehicle class)
  vehicle_class    VehicleClass @relation(fields: [vehicle_class_id], references: [id]) // Vehicle relation

  quote_number Int // FK → Quote.quote_number
  quote        Quote @relation(fields: [quote_number], references: [quote_number], onDelete: Cascade) // Parent quote

  status        TripState         @default(DRAFT) // Current trip state (operational)
  status_events TripStatusEvent[] // Event history for state transitions

  locations  Location[] // Ordered route points
  flight     Flight? // Optional flight info
  passengers TripPassenger[] // Booker/rider/greeter relations
  price      Price? // 1:1 pricing calculator

  DriverPay DriverPay[] // Driver payout records

  @@index([quote_number])
  @@index([driver_id])
  @@index([service_class_id])
  @@index([vehicle_class_id])
  @@map("trips")
}

model TripStatusEvent {
  id         String    @id @default(uuid()) // Primary key
  created_at DateTime  @default(now()) // Event timestamp
  trip_id    String // FK → Trip.id
  trip       Trip      @relation(fields: [trip_id], references: [id], onDelete: Cascade) // Trip relation
  state      TripState // State value
  label      String? // Optional human label (e.g., "Chauffeur en route")
  sequence   Int       @default(0) // Optional monotonic sequence
  set_by     String? // Who set the state (user id/system)
  notes      String? // Event notes

  @@index([trip_id, created_at])
  @@map("trip_status_events")
}

model TripPassenger {
  trip_id    String // FK → Trip.id
  contact_id String // FK → Contact.id
  role       TripPassengerRole @default(PASSENGER) // Role of contact in this trip
  primary    Boolean           @default(false) // Is this the primary passenger?
  notes      String? // Notes for this passenger
  created_at DateTime          @default(now()) // Creation timestamp
  updated_at DateTime          @updatedAt // Update timestamp

  trip    Trip    @relation(fields: [trip_id], references: [id], onDelete: Cascade) // Trip relation
  contact Contact @relation(fields: [contact_id], references: [id], onDelete: Cascade) // Contact relation

  @@id([trip_id, contact_id])
  @@index([contact_id])
  @@map("trip_passengers")
}

enum TripPassengerRole {
  PASSENGER
  BOOKER
  GREETER
}

model Location {
  id                String       @id @default(uuid()) // Primary key
  created_at        DateTime     @default(now()) // Creation timestamp
  updated_at        DateTime     @updatedAt // Update timestamp
  lat               Float // Latitude
  lng               Float // Longitude
  name              String // Place name (e.g., "Bob's Burgers")
  formatted_address String // Google formatted address
  full_name         String? // Concatenated friendly name
  place_id          String // Google Place ID (if available)
  type              LocationType @default(ORIGIN) // Route role
  trip_id           String // FK → Trip.id
  route_order       Int          @default(0) // Sequence in route (0=first)
  trip              Trip         @relation(fields: [trip_id], references: [id], onDelete: Cascade) // Trip relation

  @@index([trip_id, route_order])
  @@map("locations")
}

model Price {
  id           String    @id @default(uuid()) // Primary key
  created_at   DateTime  @default(now()) // Creation timestamp
  updated_at   DateTime  @updatedAt // Update timestamp
  currency     String    @default("USD") // Currency for money fields
  base_rate    Decimal?  @db.Decimal(12, 2) // Base rate before modifiers
  subtotal     Decimal?  @db.Decimal(12, 2) // Subtotal (pre-tax)
  tax_total    Decimal?  @db.Decimal(12, 2) // Total tax across items
  total_amount Decimal?  @db.Decimal(12, 2) // Grand total for this trip
  locked_at    DateTime? // Set when snapshot to Order occurs

  quote_number Int? // Optional FK → Quote.quote_number (cache link)
  quote        Quote? @relation(fields: [quote_number], references: [quote_number], onDelete: Cascade) // Quote relation (optional)

  trip_id String @unique // FK → Trip.id (1:1)
  trip    Trip   @relation(fields: [trip_id], references: [id], onDelete: Cascade) // Trip relation

  items PriceItem[] // Mutable calculator line items

  @@index([quote_number])
  @@map("prices")
}

model PriceItem {
  id              String      @id @default(uuid()) // Primary key
  created_at      DateTime    @default(now()) // Creation timestamp
  updated_at      DateTime    @updatedAt // Update timestamp
  price_id        String // FK → Price.id
  price           Price       @relation(fields: [price_id], references: [id], onDelete: Cascade) // Parent price
  label           String // Item label (e.g., "Base Fare")
  description     String? // Item description/details
  scope           ChargeScope // Calculation scope
  quantity        Decimal     @default(1) @db.Decimal(10, 2) // Quantity (for per-unit items)
  unit_amount     Decimal?    @db.Decimal(12, 2) // Unit amount (for fixed items)
  percent         Decimal?    @db.Decimal(7, 4) // Percentage as decimal (0.1500 = 15%)
  taxable         Boolean     @default(true) // Whether taxable
  applies_to_base Boolean     @default(false) // Whether modifies base fare
  total_amount    Decimal?    @db.Decimal(12, 2) // Computed total for this item

  line_item_id String? // Optional FK → LineItem.id (catalog source)
  line_item    LineItem? @relation(fields: [line_item_id], references: [id]) // Catalog reference

  @@index([price_id])
  @@map("price_items")
}

// ---------- CATALOGS: TAX, LINE ITEMS, SERVICES, VEHICLES ----------
model SalesTax {
  id         String    @id @default(uuid()) // Primary key
  tax_number Int       @unique @default(autoincrement()) // Human-friendly tax number
  created_at DateTime  @default(now()) // Creation timestamp
  updated_at DateTime  @updatedAt // Update timestamp
  tax_name   String // Tax name (e.g., HST)
  bps        Int       @default(0) // Basis points (e.g., 1300 = 13.00%)
  region     String // Region code (e.g., "ON")
  status     Status    @default(ACTIVE) // Active/inactive flag
  valid_from DateTime  @default(now()) // Rate valid-from date
  valid_to   DateTime? // Rate valid-to date (nullable)

  quotes Quote[] // Quotes that reference this tax

  @@map("sales_taxes")
}

model LineItem {
  id          String      @id @default(uuid()) // Primary key
  item_number Int         @unique // Human-friendly item number
  created_at  DateTime    @default(now()) // Creation timestamp
  updated_at  DateTime    @updatedAt // Update timestamp
  label       String // Catalog item label
  description String? // Catalog item description
  status      Status      @default(ACTIVE) // Active/inactive flag
  scope       ChargeScope // Default calc scope for this catalog item
  PriceItem   PriceItem[]

  @@map("line_items")
}

model ServiceClass {
  id               String                      @id @default(uuid()) // Primary key
  service_number   Int                         @unique @default(autoincrement()) // Human-friendly service number
  created_at       DateTime                    @default(now()) // Creation timestamp
  updated_at       DateTime                    @updatedAt // Update timestamp
  label            String // Service label (e.g., "Airport Transfer")
  status           Status                      @default(ACTIVE) // Active/inactive flag
  billing_basis    BillingBasis                @default(DISTANCE) // Billing mode for this service
  trips            Trip[] // Trips using this service
  eligibleVehicles ServiceVehicleEligibility[] // Allowed vehicle classes for this service
  Quote            Quote[]

  @@map("service_classes")
}

model VehicleClass {
  id              String                      @id @default(uuid()) // Primary key
  vehicle_number  Int                         @unique @default(autoincrement()) // Human-friendly vehicle class number
  created_at      DateTime                    @default(now()) // Creation timestamp
  updated_at      DateTime                    @updatedAt // Update timestamp
  label           String // Vehicle class label (e.g., "Luxury SUV")
  max_passengers  Int                         @default(0) // Max passengers
  max_luggage     Int                         @default(0) // Max luggage
  per_km_or_mile  Decimal                     @default(0) @db.Decimal(12, 2) // Distance rate
  per_hour        Decimal                     @default(0) @db.Decimal(12, 2) // Hourly rate
  min_hours       Int                         @default(0) // Minimum billable hours
  min_distance    Int                         @default(0) // Minimum billable distance (unit per distance_unit)
  min_rate        Decimal                     @default(0) @db.Decimal(12, 2) // Minimum fare
  status          Status                      @default(ACTIVE) // Active/inactive flag
  vehicle_image   String? // Representative image URL
  distance_unit   DistanceUnit                @default(KM) // Unit used for per-distance rates
  trips           Trip[] // Trips using this vehicle class
  service_classes ServiceVehicleEligibility[] // Services this class qualifies for

  Quote Quote[]

  @@map("vehicle_classes")
}

model ServiceVehicleEligibility {
  service_id String // FK → ServiceClass.id
  vehicle_id String // FK → VehicleClass.id
  service    ServiceClass @relation(fields: [service_id], references: [id], onDelete: Cascade) // Service relation
  vehicle    VehicleClass @relation(fields: [vehicle_id], references: [id], onDelete: Cascade) // Vehicle relation

  @@id([service_id, vehicle_id])
  @@map("service_vehicle_eligibilities")
}

// ---------- FLIGHTS ----------
model Flight {
  id                     String       @id @default(uuid()) // Primary key
  created_at             DateTime     @default(now()) // Creation timestamp
  updated_at             DateTime     @updatedAt // Update timestamp
  carrier_iata           String? // Airline IATA code (e.g., "AC")
  carrier_name           String? // Airline name (e.g., "Air Canada")
  flight_number          String? // Flight number (e.g., "AC123")
  status                 FlightStatus @default(SCHEDULED) // Flight status
  departure_scheduled    DateTime? // Scheduled departure time
  arrival_scheduled      DateTime? // Scheduled arrival time
  departure_actual       DateTime? // Actual departure time
  arrival_actual         DateTime? // Actual arrival time
  departure_airport_iata String? // Departure airport IATA (e.g., "YYZ")
  arrival_airport_iata   String? // Arrival airport IATA (e.g., "LAX")
  trip_id                String       @unique // FK → Trip.id (1:1)
  trip                   Trip         @relation(fields: [trip_id], references: [id], onDelete: Cascade) // Trip relation

  @@index([trip_id])
  @@map("flights")
}

// ---------- DRIVERS & PAY ----------
model Driver {
  id            String      @id @default(uuid()) // Primary key
  created_at    DateTime    @default(now()) // Creation timestamp
  updated_at    DateTime    @updatedAt // Update timestamp
  display_name  String? // Public display name
  employee_id   Int? // Internal employee number
  is_inactive   Boolean     @default(false) // Inactive flag
  company       String? // Company name (if affiliate)
  first_name    String // Driver first name
  last_name     String // Driver last name
  email_address String // Driver email (not unique)
  phone_number  String // Driver phone (not unique)
  notes         String? // Driver notes
  balance_owed  Decimal     @default(0) @db.Decimal(12, 2) // Current balance owed to driver
  trips         Trip[] // Trips assigned to driver
  payments      DriverPay[] // Payouts to driver

  @@map("drivers")
}

model DriverPay {
  id         String   @id @default(uuid()) // Primary key
  created_at DateTime @default(now()) // Creation timestamp
  updated_at DateTime @updatedAt // Update timestamp
  driverId   String // FK → Driver.id
  tripId     String // FK → Trip.id
  amount     Decimal  @db.Decimal(12, 2) // Amount payable for this trip
  is_paid    Boolean  @default(false) // Paid flag
  driver     Driver   @relation(fields: [driverId], references: [id]) // Driver relation
  trip       Trip     @relation(fields: [tripId], references: [id]) // Trip relation

  @@unique([driverId, tripId])
  @@index([tripId])
  @@index([driverId])
  @@map("driver_pays")
}

// ---------- AFFILIATES ----------
model Affiliate {
  id            String   @id @default(uuid()) // Primary key
  created_at    DateTime @default(now()) // Creation timestamp
  updated_at    DateTime @updatedAt // Update timestamp
  name          String // Affiliate name
  email_address String // Affiliate email
  phone_number  String // Affiliate phone
  address       String? // Address
  notes         String? // Notes
  is_driver     Boolean  @default(false) // Whether this affiliate is also a driver

  @@map("affiliates")
}
